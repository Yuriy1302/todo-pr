{"version":3,"sources":["components/NewTaskForm.jsx","components/TaskFilter.jsx","components/Footer.jsx","components/Timer.jsx","components/Task.jsx","components/TaskList.jsx","components/App.jsx","index.jsx"],"names":["NewTaskForm","props","onSubmitTask","onChangeValue","valueTask","onSubmit","className","onChange","value","placeholder","required","filters","TaskFilter","onFilterSelection","event","preventDefault","onFilterNameChange","target","name","renderFilterButtons","filterState","filterName","classNames","key","type","data-test","onClick","this","map","el","React","Component","Footer","countItems","onClearCompleted","Timer","tick","state","timeStart","timeInt","setState","timeResult","Number","Date","now","startTimer","clearTimeout","intervalID","loop","setTimeout","stopTimer","transformMsToTime","ms","sec","Math","floor","min","hours","completed","aria-label","Task","editValue","onSaveTask","title","currentTarget","id","onSaveEditing","editMode","onTaskSubmit","onEditeMode","renderEditInput","task","onBlur","text","onCompleted","onDeleted","checked","isCompleted","formatDistanceToNow","created","includeSeconds","TaskList","filteredTasks","tasks","filter","renderTask","tasksList","length","defaultProps","App","newTask","uniqueId","index","findIndex","oldTask","slice","currentId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c88b3abd.chunk.js","sourcesContent":["import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst NewTaskForm = (props) => {\n  const { onSubmitTask, onChangeValue, valueTask } = props;\n  return (\n    <form onSubmit={onSubmitTask}>\n      <input\n        className=\"new-todo\"\n        onChange={onChangeValue}\n        value={valueTask}\n        placeholder=\"What needs to be done?\"\n        required\n      />\n    </form>\n  );\n};\n\nNewTaskForm.propTypes = {\n  onSubmitTask: PropTypes.func.isRequired,\n  onChangeValue: PropTypes.func.isRequired,\n  valueTask: PropTypes.string.isRequired,\n};\n\nexport default NewTaskForm;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst filters = [\n  ['all', 'All'],\n  ['active', 'Active'],\n  ['finished', 'Completed'],\n];\n\nclass TaskFilter extends React.Component {\n  static propTypes = {\n    filterState: PropTypes.string.isRequired,\n    onFilterNameChange: PropTypes.func.isRequired,\n  };\n\n  onFilterSelection = (event) => {\n    event.preventDefault();\n    const { onFilterNameChange } = this.props;\n    onFilterNameChange(event.target.name);\n  };\n\n  renderFilterButtons = ([filterName, name], filterState) => {\n    const classNames = filterName === filterState ? 'selected' : '';\n    return (\n      <li key={filterName}>\n        <button\n          type=\"button\"\n          className={classNames}\n          name={filterName}\n          data-test={`task-filter-${filterName}`}\n          onClick={this.onFilterSelection}\n        >\n          {name}\n        </button>\n      </li>\n    );\n  };\n\n  render() {\n    const { filterState } = this.props;\n    return <ul className=\"filters\">{filters.map((el) => this.renderFilterButtons(el, filterState))}</ul>;\n  }\n}\n\nexport default TaskFilter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport TaskFilter from './TaskFilter';\n\nconst Footer = (props) => {\n  const { countItems, filterState, onFilterNameChange, onClearCompleted } = props;\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{countItems} items left</span>\n      <TaskFilter filterState={filterState} onFilterNameChange={onFilterNameChange} />\n      <button type=\"button\" className=\"clear-completed\" onClick={onClearCompleted}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = {\n  countItems: PropTypes.number.isRequired,\n  filterState: PropTypes.string.isRequired,\n  onFilterNameChange: PropTypes.func.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Timer extends React.Component {\n  static propTypes = {\n    completed: PropTypes.bool.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeStart: 0,\n      timeInt: 0,\n      timeResult: 0,\n    };\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.intervalID);\n  }\n\n  tick = () => {\n    const { timeStart, timeInt } = this.state;\n    this.setState({\n      timeResult: timeInt + (Number(Date.now()) - timeStart),\n    });\n  };\n\n  startTimer = () => {\n    const { timeResult } = this.state;\n    clearTimeout(this.intervalID);\n    this.setState({\n      timeInt: timeResult,\n      timeStart: Number(Date.now()),\n    });\n\n    const loop = () => {\n      this.intervalID = setTimeout(() => {\n        this.tick();\n        loop();\n      }, 1000);\n    };\n    loop();\n  };\n\n  stopTimer = () => {\n    const { timeResult } = this.state;\n    this.setState({\n      timeInt: timeResult,\n    });\n    clearTimeout(this.intervalID);\n  };\n\n  transformMsToTime = (ms) => {\n    let sec = Math.floor((ms / 1000) % 60);\n    let min = Math.floor((ms / (1000 * 60)) % 60);\n    let hours = Math.floor((ms / (1000 * 60 * 60)) % 24);\n    sec = sec < 10 ? `0${sec}` : sec;\n    min = min < 10 ? `0${min}` : min;\n\n    if (ms >= 3600000) {\n      hours = hours < 10 ? `0${hours}` : hours;\n      return `${hours}:${min}:${sec}`;\n    }\n\n    return `${min}:${sec}`;\n  };\n\n  render() {\n    const { completed } = this.props;\n    const { timeResult } = this.state;\n\n    if (completed) {\n      clearTimeout(this.intervalID);\n    }\n\n    return (\n      <span className=\"description\">\n        <button type=\"button\" className=\"icon icon-play\" onClick={this.startTimer} aria-label=\"Start timer\" />\n        <button type=\"button\" className=\"icon icon-pause\" onClick={this.stopTimer} aria-label=\"Stop timer\" />\n        {this.transformMsToTime(timeResult)}\n      </span>\n    );\n  }\n}\n\nexport default Timer;\n","import React from 'react';\nimport { formatDistanceToNow } from 'date-fns';\n\nimport PropTypes from 'prop-types';\n\nimport Timer from './Timer';\n\nclass Task extends React.Component {\n  static propTypes = {\n    task: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n    onSaveEditing: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func.isRequired,\n    onDeleted: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      editMode: false,\n      editValue: `${props.task.text}`,\n    };\n  }\n\n  onChange = (event) => {\n    event.preventDefault();\n    this.setState({ editValue: event.target.value });\n  };\n\n  onSaveTask = (event) => {\n    event.preventDefault();\n    const title = event.currentTarget.value;\n    const id = event.currentTarget.name;\n    const { onSaveEditing } = this.props;\n    onSaveEditing(id, title);\n    this.setState((state) => {\n      const { editMode } = state;\n      return { editMode: !editMode };\n    });\n  };\n\n  onTaskSubmit = (id, title) => (event) => {\n    event.preventDefault();\n    const { onSaveEditing } = this.props;\n    onSaveEditing(id, title);\n    this.setState((state) => {\n      const { editMode } = state;\n      return { editMode: !editMode };\n    });\n  };\n\n  onEditeMode = () => {\n    this.setState((state) => {\n      const { editMode } = state;\n      return { editMode: !editMode };\n    });\n  };\n\n  renderEditInput = (task, editValue) => {\n    return (\n      <form onSubmit={this.onTaskSubmit(task.id, editValue)}>\n        <input\n          type=\"text\"\n          className=\"edit\"\n          name={task.id}\n          value={editValue}\n          onChange={this.onChange}\n          onBlur={this.onSaveTask}\n        />\n      </form>\n    );\n  };\n\n  render() {\n    const { task, onCompleted, onDeleted } = this.props;\n\n    const { editMode, editValue } = this.state;\n\n    let classNames = 'completed';\n    if (task.state === 'active') {\n      classNames = '';\n    }\n\n    if (editMode) {\n      classNames = 'editing';\n    }\n\n    return (\n      <li className={classNames}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" name={task.id} checked={task.isCompleted} onChange={onCompleted} />\n          <label>\n            <span className=\"title\">{task.text}</span>\n            <Timer completed={task.isCompleted} />\n            <span className=\"description\">\n              created&nbsp;\n              {formatDistanceToNow(task.created, { includeSeconds: true })}\n              &nbsp;ago\n            </span>\n          </label>\n          <button\n            type=\"button\"\n            className=\"icon icon-edit\"\n            name={task.id}\n            onClick={this.onEditeMode}\n            aria-label=\"Edite task\"\n          />\n          <button type=\"button\" className=\"icon icon-destroy\" onClick={onDeleted} aria-label=\"Delete task\" />\n        </div>\n        {editMode && this.renderEditInput(task, editValue)}\n      </li>\n    );\n  }\n}\n\nexport default Task;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Task from './Task';\n\nclass TaskList extends React.Component {\n  static defaultProps = {\n    filterState: 'all',\n  };\n\n  static propTypes = {\n    filterState: PropTypes.string,\n    tasksList: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onDeleted: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func.isRequired,\n    onSaveEditing: PropTypes.func.isRequired,\n  };\n\n  filteredTasks = (tasks, filterState) => {\n    const newTasksList = filterState === 'all' ? tasks : tasks.filter((task) => task.state === filterState);\n    return newTasksList;\n  };\n\n  renderTask = (task) => {\n    const { onDeleted, onCompleted, onSaveEditing } = this.props;\n    return (\n      <Task\n        onDeleted={onDeleted(task.id)}\n        onCompleted={onCompleted}\n        task={task}\n        key={task.id}\n        onSaveEditing={onSaveEditing}\n      />\n    );\n  };\n\n  render() {\n    const { tasksList, filterState } = this.props;\n    const tasks = this.filteredTasks(tasksList, filterState);\n    return <ul className=\"todo-list\">{tasks.length > 0 && tasks.map(this.renderTask)}</ul>;\n  }\n}\n\nexport default TaskList;\n","import React from 'react';\nimport uniqueId from 'lodash/uniqueId';\n\nimport NewTaskForm from './NewTaskForm';\nimport Footer from './Footer';\nimport TaskList from './TaskList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      valueTask: '',\n      tasksList: [],\n      filterState: 'all',\n    };\n  }\n\n  onChangeValue = (event) => {\n    event.preventDefault();\n    this.setState({ valueTask: event.target.value });\n  };\n\n  onSubmitTask = (event) => {\n    event.preventDefault();\n    const { valueTask } = this.state;\n    const newTask = {\n      id: uniqueId(),\n      text: valueTask,\n      state: 'active',\n      isCompleted: false,\n      created: Date.now(),\n    };\n    this.setState(({ tasksList }) => {\n      const newList = [newTask, ...tasksList];\n      return {\n        tasksList: newList,\n        valueTask: '',\n      };\n    });\n  };\n\n  onCompleted = (event) => {\n    const { name } = event.target;\n    this.setState(({ tasksList }) => {\n      const index = tasksList.findIndex((task) => task.id === name);\n      const oldTask = tasksList[index];\n      const newTask = {\n        ...oldTask,\n        state: oldTask.state === 'active' ? 'finished' : 'active',\n        isCompleted: !oldTask.isCompleted,\n      };\n      const newList = [...tasksList.slice(0, index), newTask, ...tasksList.slice(index + 1)];\n      return { tasksList: newList };\n    });\n  };\n\n  onDeleted = (currentId) => (event) => {\n    event.preventDefault();\n    this.setState(({ tasksList }) => {\n      const newList = tasksList.filter((task) => task.id !== currentId);\n      return { tasksList: newList };\n    });\n  };\n\n  onClearCompleted = () => {\n    this.setState(({ tasksList }) => {\n      const newList = tasksList.filter((task) => task.state === 'active');\n      return { tasksList: newList };\n    });\n  };\n\n  onFilterNameChange = (name) => {\n    this.setState({ filterState: name });\n  };\n\n  onSaveEditing = (id, title) => {\n    this.setState(({ tasksList }) => {\n      const index = tasksList.findIndex((task) => task.id === id);\n      const oldTask = tasksList[index];\n      const newTask = {\n        ...oldTask,\n        text: title,\n      };\n      const newList = [...tasksList.slice(0, index), newTask, ...tasksList.slice(index + 1)];\n      return { tasksList: newList };\n    });\n  };\n\n  render() {\n    const { tasksList, valueTask, filterState } = this.state;\n    const countItems = tasksList.filter((task) => task.state === 'active').length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTaskForm onChangeValue={this.onChangeValue} onSubmitTask={this.onSubmitTask} valueTask={valueTask} />\n        </header>\n        <section className=\"main\">\n          <TaskList\n            tasksList={tasksList}\n            onDeleted={this.onDeleted}\n            onCompleted={this.onCompleted}\n            filterState={filterState}\n            onSaveEditing={this.onSaveEditing}\n          />\n          <Footer\n            countItems={countItems}\n            onClearCompleted={this.onClearCompleted}\n            filterState={filterState}\n            onFilterNameChange={this.onFilterNameChange}\n          />\n        </section>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport './style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}